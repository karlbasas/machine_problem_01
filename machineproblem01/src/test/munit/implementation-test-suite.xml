<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:context="http://www.springframework.org/schema/context"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <context:property-placeholder location="dev.properties"/>
    <munit:config name="munit" doc:name="MUnit configuration" mock-connectors="false" mock-inbounds="false"/>
    <spring:beans>
        <spring:import resource="classpath:implementation.xml"/>
    </spring:beans>
    <munit:test name="getAllUsers-positiveTest" description="GetUsers returned records">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get All Users']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[[{'Gender' :'M', 'dateRegistered' : '2012-08-20', 'Username' : 'john123', 'FullName' : 'John White Smith','Birthday' : 884925138}]]" mimeType="*/*"/>
        </mock:when>
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="requester-id" value="#['j32io33ise4k2qq1']"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="implementation" doc:name="Flow-ref to implementation"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="getAllUsers-emptyRecordTest" description="GetUsers returned no record">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get All Users']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[[]]" mimeType="*/*"/>
        </mock:when>
        <flow-ref name="processrecord" doc:name="Flow-ref to processrecord"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <munit:assert-true message="Payload is not empty" condition="#[payload.size() == 0]" doc:name="Assert True"/>
    </munit:test>
    <munit:test name="getAllUsers-databaseErrorTest" description="Database is unreachable" expectException="java.sql.SQLException">
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="requester-id" value="#['j32io33ise4k2qq1']"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="implementation" doc:name="Flow-ref to implementation"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <munit:assert-on-equals expectedValue="#[500]" actualValue="#[message.outboundProperties.'http.status']" doc:name="Assert Status 500"/>
    </munit:test>
    <munit:test name="getUser-positiveTest" description="GetUser returned record">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get Specific User']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[[{'Gender' :'M', 'dateRegistered' : '2012-08-20', 'Username' : 'john123', 'FullName' : 'John White Smith','Birthday' : 884925138}]]" mimeType="*/*"/>
        </mock:when>
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="requester-id" value="#['j32io33ise4k2qq1']"/>
            </munit:inbound-properties>
        </munit:set>
        <set-variable variableName="userId" value="#['A1']" doc:name="Variable"/>
        <flow-ref name="implementation" doc:name="Flow-ref to implementation"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <munit:assert-not-null doc:name="Assert Not Null Payload"/>
    </munit:test>
    <munit:test name="getuser-emptyRecordTest" description="GetUser returned no record">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get Specific User']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[[]]" mimeType="*/*"/>
        </mock:when>
        <set-variable variableName="userId" value="#['A1']" doc:name="Variable"/>
        <flow-ref name="processrecord" doc:name="Flow-ref to processrecord"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <munit:assert-true message="Payload is not empty" condition="#[payload.size() == 0]" doc:name="Assert True"/>
    </munit:test>
    <munit:test name="getuser-databaseErrorTest" description="Database is unreachable" expectException="java.sql.SQLException">
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="requester-id" value="#['j32io33ise4k2qq1']"/>
            </munit:inbound-properties>
        </munit:set>
        <set-variable variableName="userId" value="#['A1']" doc:name="Variable"/>
        <flow-ref name="implementation" doc:name="Flow-ref to implementation"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <munit:assert-on-equals expectedValue="#[500]" actualValue="#[message.outboundProperties.'http.status']" doc:name="Assert Status 500"/>
    </munit:test>
</mule>
